//
//  InputConfFile.swift
//  iina
//
//  Created by Matt Svoboda on 2022.08.10.
//  Copyright Â© 2022 lhc. All rights reserved.
//

import Foundation

// Represents an input config file which has been loaded into memory.
class InputConfFile {
  // At least one of its fields should be non-nil.
  // Only Lines with non-nil `rawFileContent` are present in the file on disk.
  // A Line struct can include additional in-memory state (if `bindingOverride` is non-nil) which is not present on disk.
  private struct Line {
    let rawFileContent: String?  // reflects content on disk
    let bindingOverride: KeyMapping?  // only exists in memory. Useful for maintaining edits even while they are not parseable

    init(_ rawFileContent: String? = nil, bindingOverride: KeyMapping? = nil) {
      self.rawFileContent = rawFileContent
      self.bindingOverride = bindingOverride
    }
  }

  let isReadOnly: Bool

  // The path of the source file on disk
  let filePath: String

  // This should reflect what is on disk at all times
  private var lines: [Line]

  init(filePath: String, isReadOnly: Bool) {
    self.filePath = filePath
    self.lines = []
    self.isReadOnly = isReadOnly
  }

  // This parses the file's lines one by one, skipping lines which are blank or only comments, If a line looks like a key binding,
  // a KeyMapping object is constructed for it, and each KeyMapping makes note of the line number from which it came. A list of the successfully
  // constructed KeyMappings is returned once the entire file has been parsed.
  func parseMappings() -> [KeyMapping] {
    var bindingList: [KeyMapping] = []

    var linesNew: [Line] = []
    for line in self.lines {
      let lineIndex = linesNew.count
      if let binding = line.bindingOverride {
        // Note: `lineIndex` includes bindingOverrides and thus may be greater than the equivalent line number in the physical file

        let bindingNew = binding.clone(bindingID: lineIndex)
        bindingList.append(bindingNew)
        linesNew.append(Line(line.rawFileContent, bindingOverride: bindingNew))
      } else if let rawFileContent = line.rawFileContent, let binding = InputConfFile.parseRawLine(rawFileContent, lineIndex) {
        bindingList.append(binding)
        linesNew.append(line)
      }
    }
    self.lines = linesNew

    return bindingList
  }

  private func parseLine(_ lineIndex: Int) -> KeyMapping? {
    if let rawLine = lines[lineIndex].rawFileContent {
      return InputConfFile.parseRawLine(rawLine, lineIndex)
    }
    return nil
  }

  // Returns a KeyMapping if successful, nil if line has no mapping or is not correct format
  static func parseRawLine(_ rawLine: String, _ lineIndex: Int? = nil) -> KeyMapping? {
    var content = rawLine
    var isIINACommand = false
    if content.trimmingCharacters(in: .whitespaces).isEmpty {
      return nil
    } else if content.hasPrefix("#") {
      if content.hasPrefix(KeyMapping.IINA_PREFIX) {
        // extended syntax
        isIINACommand = true
        content = String(content[content.index(content.startIndex, offsetBy: KeyMapping.IINA_PREFIX.count)...])
      } else {
        // ignore comment line
        return nil
      }
    }
    var comment: String? = nil
    if let sharpIndex = content.firstIndex(of: "#") {
      comment = String(content[content.index(after: sharpIndex)...])
      content = String(content[...content.index(before: sharpIndex)])
    }
    // split
    let splitted = content.split(maxSplits: 1, whereSeparator: { $0 == " " || $0 == "\t"})
    if splitted.count < 2 {
      return nil  // no command, wrong format
    }
    let key = String(splitted[0]).trimmingCharacters(in: .whitespaces)
    let action = String(splitted[1]).trimmingCharacters(in: .whitespaces)

    return KeyMapping(rawKey: key, rawAction: action, isIINACommand: isIINACommand, comment: comment, bindingID: lineIndex)
  }

  func replaceAllMappings(with newMappings: [KeyMapping]) {
    guard !isReadOnly else {
      Logger.log("replaceAllMappings(): aborting - isReadOnly==true!", level: .error)
      return
    }
    var newLines: [Line] = []
    newLines.append(Line("# Generated by IINA"))
    newLines.append(Line(""))
    for newMapping in newMappings {
      let rawLine = newMapping.confFileFormat
      if InputConfFile.parseRawLine(rawLine) == nil {
        Logger.log("While serializing bindings: looks like an active edit: \(newMapping)", level: .verbose)
        if let lineIndex = newMapping.bindingID,
           lineIndex <= self.lines.count,
           let fileRawLine = self.lines[lineIndex].rawFileContent {
          // line previously existed
          newLines.append(Line(fileRawLine, bindingOverride: newMapping))
        } else {
          // line was added
          newLines.append(Line(bindingOverride: newMapping))
        }
      } else {
        // valid binding
        newLines.append(Line(rawLine))
      }
    }
    lines = newLines
  }

  // For all the lines between lineIndexStart and lineIndexEnd (exclusive), append to lineArray if they are not parsable bindings
  private func appendNonMappingLines(between lineIndexStart: Int, and lineIndexEnd: Int, to lineArray: inout [Line]) {
    for inBetweenLineNumber in (lineIndexStart+1)..<lineIndexEnd {
      appendNonMappingLine(at: inBetweenLineNumber, to: &lineArray)
    }
  }

  private func appendNonMappingLine(at lineIndex: Int, to lineArray: inout [Line]) {
    if parseLine(lineIndex) == nil {
      // No binding - maybe comment or some other thing. Write it back to file
      lineArray.append(lines[lineIndex])
    } else {
      // If it was not included in the new bindings, treat it as a remove.
      Logger.log("Mapping on line \(lineIndex) removed")
    }
  }

  func saveToDisk() throws {
    guard !isReadOnly else {
      Logger.log("saveToDisk(): aborting - isReadOnly==true!", level: .error)
      return
    }
    let fileContent: String = lines.filter({ $0.rawFileContent != nil}).map({ $0.rawFileContent! }).joined(separator: "\n")
    try fileContent.write(toFile: self.filePath, atomically: true, encoding: .utf8)
  }

  // Returns nil if cannot read file
  static func loadFile(at path: String, isReadOnly: Bool = true) -> InputConfFile? {
    guard let reader = StreamReader(path: path) else {
      // on error
      Logger.log("Error loading key bindings from path: \"\(path)\"", level: .error)
      let fileName = URL(fileURLWithPath: path).lastPathComponent
      let alertInfo = Utility.AlertInfo(key: "keybinding_config.error", args: [fileName])
      NotificationCenter.default.post(Notification(name: .iinaKeyBindingErrorOccurred, object: alertInfo))

      return nil
    }
    let result = InputConfFile(filePath: path, isReadOnly: isReadOnly)

    while let rawFileContent: String = reader.nextLine() {      // ignore empty lines
      if result.lines.count >= AppData.maxConfFileLinesAccepted {
        Logger.log("Maximum number of lines (\(AppData.maxConfFileLinesAccepted)) exceeded: stopping load of file: \"\(path)\"")
        return nil
      }
      result.lines.append(Line(rawFileContent))
    }
    return result
  }

}
